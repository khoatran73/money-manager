// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["mongoDb"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    image          String?
    email          String?   @unique
    emailVerified  DateTime?
    hashedPassword String?
    isAdmin        Boolean   @default(false)
    isLocked       Boolean   @default(false)
    lockedAt       DateTime?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    currencyId    String?         @db.ObjectId
    currency      Currency?       @relation(fields: [currencyId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    categories    Category[]
    transactions  Transaction[]
    accounts      Account[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Country {
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    name  String
    image String?

    Currency Currency?
}

model Currency {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    code          String        @unique
    symbol        String?       @unique
    exchangeRate  Float
    writtingStyle WrittingStyle @default(Prefix)

    countryId String  @unique @db.ObjectId
    country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    users     User[]
}

enum WrittingStyle {
    Prefix
    Postfix
}

model CategoryImage {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String?
    code      Int
    image     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdById String? @db.ObjectId
    updatedById String? @db.ObjectId

    Category Category[]
}

model Category {
    id        String          @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    level     Int
    index     Int
    type      TransactionType @default(Expense)
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt

    imageId String        @db.ObjectId
    image   CategoryImage @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    userId       String        @db.ObjectId
    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    transactions Transaction[]

    parentId String?    @db.ObjectId
    parent   Category?  @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children Category[] @relation("ParentChildren")
}

model Transaction {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    type        TransactionType @default(Expense)
    amount      Float
    date        DateTime        @default(now())
    description String?
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt

    userId     String   @db.ObjectId
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId String   @db.ObjectId
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum TransactionType {
    Expense
    Income
}
